openapi: 3.0.1
info:
  contact:
    email: info@gemini-commerce.com
    name: Gemini Team
  license:
    name: Gemini fair use license
    url: https://gemini-commerce.com/api/fair-use-license
  title: IamBackoffice Service
  version: v1
servers:
- url: https://iambackoffice.api.gogemini.io/
tags:
- externalDocs:
    url: https://gemini-commerce.com/api/iambackoffice
  name: IamBackoffice
paths:
  /iambackoffice.IamBackoffice/AssignRoles:
    post:
      operationId: IamBackoffice_AssignRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeAssignRolesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeAssignRolesResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: AUTHZ
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/AssignUserToGroup:
    post:
      operationId: IamBackoffice_AssignUserToGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeAssignUserToGroupRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeAssignUserToGroupResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/CreateGroup:
    post:
      operationId: IamBackoffice_CreateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeCreateGroupRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeCreateGroupResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: GROUPS
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/DisableUserMfa:
    post:
      operationId: IamBackoffice_DisableUserMfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeDisableUserMfaRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeUserMfaResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/EnableUserMfa:
    post:
      operationId: IamBackoffice_EnableUserMfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeEnableUserMfaRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeUserMfaResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/GenerateSecretForQR:
    post:
      operationId: IamBackoffice_GenerateSecretForQR
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeGenerateSecretForQRResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: MFA
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/GetUser:
    post:
      operationId: IamBackoffice_GetUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeGetUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeGetUserResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: USER
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/Login:
    post:
      operationId: IamBackoffice_Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: LOGIN
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/LoginMfa:
    post:
      operationId: IamBackoffice_LoginMfa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeLoginMfaRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeLoginResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: LOGIN MFA
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/Logout:
    post:
      operationId: IamBackoffice_Logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeLogoutRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeLogoutResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/Register:
    post:
      operationId: IamBackoffice_Register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeRegistrationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeRegistrationResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: REGISTRATION
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/SearchGroups:
    post:
      operationId: IamBackoffice_SearchGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeSearchGroupsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeSearchGroupsResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /iambackoffice.IamBackoffice/UnassignRoles:
    post:
      operationId: IamBackoffice_UnassignRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iambackofficeUnassignRolesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iambackofficeUnassignRolesResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - IamBackoffice
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    SearchGroupsRequestFilters:
      properties:
        data:
          additionalProperties:
            type: string
          type: object
      type: object
    iambackofficeAssignRolesRequest:
      properties:
        loginId:
          type: string
        tenantId:
          type: string
        roleCodes:
          items:
            type: string
          type: array
      type: object
    iambackofficeAssignRolesResponse:
      example:
        roleCodes:
        - roleCodes
        - roleCodes
      properties:
        roleCodes:
          items:
            type: string
          type: array
      type: object
    iambackofficeAssignUserToGroupRequest:
      properties:
        tenantId:
          type: string
        userId:
          type: string
        groupId:
          type: string
      type: object
    iambackofficeAssignUserToGroupResponse:
      type: object
    iambackofficeAuthenticatorConfiguration:
      example:
        codeLength: 0
        timeStep: 6
        algorithm: algorithm
      properties:
        algorithm:
          type: string
        codeLength:
          format: int32
          type: integer
        timeStep:
          format: int32
          type: integer
      type: object
    iambackofficeCreateGroupRequest:
      properties:
        tenantId:
          type: string
        name:
          type: string
        data:
          additionalProperties:
            type: string
          type: object
      type: object
    iambackofficeCreateGroupResponse:
      example:
        group:
          id: id
      properties:
        group:
          $ref: '#/components/schemas/iambackofficeGroup'
      type: object
    iambackofficeDevice:
      properties:
        description:
          type: string
        name:
          type: string
        deviceType:
          type: string
      type: object
    iambackofficeDisableUserMfaRequest:
      properties:
        userId:
          type: string
        code:
          type: string
        methodId:
          type: string
      type: object
    iambackofficeEnableUserMfaRequest:
      properties:
        userId:
          type: string
        secret:
          type: string
        code:
          type: string
      type: object
    iambackofficeGenerateSecretForQRResponse:
      example:
        secret: secret
      properties:
        secret:
          type: string
      type: object
    iambackofficeGetUserRequest:
      properties:
        tenantId:
          type: string
        userId:
          type: string
        email:
          type: string
        username:
          type: string
      type: object
    iambackofficeGetUserResponse:
      example:
        user:
          lastName: lastName
          twoFactor:
            methods:
            - method: method
              mobilePhone: mobilePhone
              id: id
              secret: secret
              authenticator:
                codeLength: 0
                timeStep: 6
                algorithm: algorithm
              email: email
            - method: method
              mobilePhone: mobilePhone
              id: id
              secret: secret
              authenticator:
                codeLength: 0
                timeStep: 6
                algorithm: algorithm
              email: email
            recoveryCodes:
            - recoveryCodes
            - recoveryCodes
          passwordChangeRequired: true
          lastUpdateInstant: lastUpdateInstant
          registrations:
          - data:
              key: data
            timezone: timezone
            roles:
            - roles
            - roles
            tenantId: tenantId
            preferredLanguages:
            - preferredLanguages
            - preferredLanguages
          - data:
              key: data
            timezone: timezone
            roles:
            - roles
            - roles
            tenantId: tenantId
            preferredLanguages:
            - preferredLanguages
            - preferredLanguages
          data:
            key: data
          timezone: timezone
          verified: true
          active: true
          fullName: fullName
          birthDate: birthDate
          firstName: firstName
          password: password
          lastLoginInstant: lastLoginInstant
          mobilePhone: mobilePhone
          imageUrl: imageUrl
          preferredLanguages:
          - preferredLanguages
          - preferredLanguages
          insertInstant: insertInstant
          middleName: middleName
          id: id
          passwordLastUpdateInstant: passwordLastUpdateInstant
          email: email
          username: username
      properties:
        user:
          $ref: '#/components/schemas/iambackofficeUser'
      type: object
    iambackofficeGroup:
      example:
        id: id
      properties:
        id:
          type: string
      type: object
    iambackofficeLoginMfaRequest:
      properties:
        tenantId:
          type: string
        code:
          type: string
        twoFactorId:
          type: string
      type: object
    iambackofficeLoginRequest:
      properties:
        tenantId:
          type: string
        ipAddress:
          type: string
        loginId:
          type: string
        metaData:
          $ref: '#/components/schemas/iambackofficeMetaData'
        noTokens:
          type: boolean
        password:
          type: string
        twoFactorTrustId:
          type: string
      type: object
    iambackofficeLoginResponse:
      example:
        twoFactorId: twoFactorId
        methods:
        - method: method
          mobilePhone: mobilePhone
          id: id
          secret: secret
          authenticator:
            codeLength: 0
            timeStep: 6
            algorithm: algorithm
          email: email
        - method: method
          mobilePhone: mobilePhone
          id: id
          secret: secret
          authenticator:
            codeLength: 0
            timeStep: 6
            algorithm: algorithm
          email: email
        tenantId: tenantId
        tokens:
          '@type': '@type'
        user:
          lastName: lastName
          twoFactor:
            methods:
            - method: method
              mobilePhone: mobilePhone
              id: id
              secret: secret
              authenticator:
                codeLength: 0
                timeStep: 6
                algorithm: algorithm
              email: email
            - method: method
              mobilePhone: mobilePhone
              id: id
              secret: secret
              authenticator:
                codeLength: 0
                timeStep: 6
                algorithm: algorithm
              email: email
            recoveryCodes:
            - recoveryCodes
            - recoveryCodes
          passwordChangeRequired: true
          lastUpdateInstant: lastUpdateInstant
          registrations:
          - data:
              key: data
            timezone: timezone
            roles:
            - roles
            - roles
            tenantId: tenantId
            preferredLanguages:
            - preferredLanguages
            - preferredLanguages
          - data:
              key: data
            timezone: timezone
            roles:
            - roles
            - roles
            tenantId: tenantId
            preferredLanguages:
            - preferredLanguages
            - preferredLanguages
          data:
            key: data
          timezone: timezone
          verified: true
          active: true
          fullName: fullName
          birthDate: birthDate
          firstName: firstName
          password: password
          lastLoginInstant: lastLoginInstant
          mobilePhone: mobilePhone
          imageUrl: imageUrl
          preferredLanguages:
          - preferredLanguages
          - preferredLanguages
          insertInstant: insertInstant
          middleName: middleName
          id: id
          passwordLastUpdateInstant: passwordLastUpdateInstant
          email: email
          username: username
      properties:
        tokens:
          $ref: '#/components/schemas/protobufAny'
        user:
          $ref: '#/components/schemas/iambackofficeUser'
        methods:
          items:
            $ref: '#/components/schemas/iambackofficeTwoFactorMethod'
          type: array
        twoFactorId:
          type: string
        tenantId:
          type: string
      type: object
    iambackofficeLogoutRequest:
      properties:
        global:
          type: boolean
        tokens:
          $ref: '#/components/schemas/protobufAny'
      type: object
    iambackofficeLogoutResponse:
      example:
        success: true
      properties:
        success:
          type: boolean
      type: object
    iambackofficeMetaData:
      properties:
        device:
          $ref: '#/components/schemas/iambackofficeDevice'
      type: object
    iambackofficeRegistrationRequest:
      properties:
        registration:
          $ref: '#/components/schemas/iambackofficeUserRegistration'
        sendSetPasswordEmail:
          type: boolean
        skipRegistrationVerification:
          type: boolean
        skipVerification:
          type: boolean
        user:
          $ref: '#/components/schemas/iambackofficeUser'
        tenantId:
          type: string
      type: object
    iambackofficeRegistrationResponse:
      example:
        tokens:
          '@type': '@type'
        registration:
          data:
            key: data
          timezone: timezone
          roles:
          - roles
          - roles
          tenantId: tenantId
          preferredLanguages:
          - preferredLanguages
          - preferredLanguages
        user:
          lastName: lastName
          twoFactor:
            methods:
            - method: method
              mobilePhone: mobilePhone
              id: id
              secret: secret
              authenticator:
                codeLength: 0
                timeStep: 6
                algorithm: algorithm
              email: email
            - method: method
              mobilePhone: mobilePhone
              id: id
              secret: secret
              authenticator:
                codeLength: 0
                timeStep: 6
                algorithm: algorithm
              email: email
            recoveryCodes:
            - recoveryCodes
            - recoveryCodes
          passwordChangeRequired: true
          lastUpdateInstant: lastUpdateInstant
          registrations:
          - data:
              key: data
            timezone: timezone
            roles:
            - roles
            - roles
            tenantId: tenantId
            preferredLanguages:
            - preferredLanguages
            - preferredLanguages
          - data:
              key: data
            timezone: timezone
            roles:
            - roles
            - roles
            tenantId: tenantId
            preferredLanguages:
            - preferredLanguages
            - preferredLanguages
          data:
            key: data
          timezone: timezone
          verified: true
          active: true
          fullName: fullName
          birthDate: birthDate
          firstName: firstName
          password: password
          lastLoginInstant: lastLoginInstant
          mobilePhone: mobilePhone
          imageUrl: imageUrl
          preferredLanguages:
          - preferredLanguages
          - preferredLanguages
          insertInstant: insertInstant
          middleName: middleName
          id: id
          passwordLastUpdateInstant: passwordLastUpdateInstant
          email: email
          username: username
      properties:
        tokens:
          $ref: '#/components/schemas/protobufAny'
        registration:
          $ref: '#/components/schemas/iambackofficeUserRegistration'
        user:
          $ref: '#/components/schemas/iambackofficeUser'
      type: object
    iambackofficeSearchGroupsRequest:
      properties:
        tenantId:
          type: string
        filters:
          $ref: '#/components/schemas/SearchGroupsRequestFilters'
        filtersMask:
          type: string
      type: object
    iambackofficeSearchGroupsResponse:
      example:
        groups:
        - id: id
        - id: id
      properties:
        groups:
          items:
            $ref: '#/components/schemas/iambackofficeGroup'
          type: array
      type: object
    iambackofficeTwoFactorMethod:
      example:
        method: method
        mobilePhone: mobilePhone
        id: id
        secret: secret
        authenticator:
          codeLength: 0
          timeStep: 6
          algorithm: algorithm
        email: email
      properties:
        authenticator:
          $ref: '#/components/schemas/iambackofficeAuthenticatorConfiguration'
        email:
          type: string
        id:
          type: string
        method:
          type: string
        mobilePhone:
          type: string
        secret:
          type: string
      type: object
    iambackofficeUnassignRolesRequest:
      properties:
        loginId:
          type: string
        tenantId:
          type: string
        roleCodes:
          items:
            type: string
          type: array
      type: object
    iambackofficeUnassignRolesResponse:
      example:
        roleCodes:
        - roleCodes
        - roleCodes
      properties:
        roleCodes:
          items:
            type: string
          type: array
      type: object
    iambackofficeUser:
      example:
        lastName: lastName
        twoFactor:
          methods:
          - method: method
            mobilePhone: mobilePhone
            id: id
            secret: secret
            authenticator:
              codeLength: 0
              timeStep: 6
              algorithm: algorithm
            email: email
          - method: method
            mobilePhone: mobilePhone
            id: id
            secret: secret
            authenticator:
              codeLength: 0
              timeStep: 6
              algorithm: algorithm
            email: email
          recoveryCodes:
          - recoveryCodes
          - recoveryCodes
        passwordChangeRequired: true
        lastUpdateInstant: lastUpdateInstant
        registrations:
        - data:
            key: data
          timezone: timezone
          roles:
          - roles
          - roles
          tenantId: tenantId
          preferredLanguages:
          - preferredLanguages
          - preferredLanguages
        - data:
            key: data
          timezone: timezone
          roles:
          - roles
          - roles
          tenantId: tenantId
          preferredLanguages:
          - preferredLanguages
          - preferredLanguages
        data:
          key: data
        timezone: timezone
        verified: true
        active: true
        fullName: fullName
        birthDate: birthDate
        firstName: firstName
        password: password
        lastLoginInstant: lastLoginInstant
        mobilePhone: mobilePhone
        imageUrl: imageUrl
        preferredLanguages:
        - preferredLanguages
        - preferredLanguages
        insertInstant: insertInstant
        middleName: middleName
        id: id
        passwordLastUpdateInstant: passwordLastUpdateInstant
        email: email
        username: username
      properties:
        active:
          type: boolean
        birthDate:
          type: string
        data:
          additionalProperties:
            type: string
          type: object
        email:
          type: string
        firstName:
          type: string
        fullName:
          type: string
        id:
          type: string
        imageUrl:
          type: string
        insertInstant:
          format: int64
          type: string
        lastLoginInstant:
          format: int64
          type: string
        lastName:
          type: string
        lastUpdateInstant:
          format: int64
          type: string
        middleName:
          type: string
        mobilePhone:
          type: string
        password:
          type: string
        passwordChangeRequired:
          type: boolean
        passwordLastUpdateInstant:
          format: int64
          type: string
        preferredLanguages:
          items:
            type: string
          type: array
        registrations:
          items:
            $ref: '#/components/schemas/iambackofficeUserRegistration'
          type: array
        timezone:
          type: string
        twoFactor:
          $ref: '#/components/schemas/iambackofficeUserTwoFactorConfiguration'
        username:
          type: string
        verified:
          type: boolean
      type: object
    iambackofficeUserMfaResponse:
      example:
        success: true
      properties:
        success:
          type: boolean
      type: object
    iambackofficeUserRegistration:
      example:
        data:
          key: data
        timezone: timezone
        roles:
        - roles
        - roles
        tenantId: tenantId
        preferredLanguages:
        - preferredLanguages
        - preferredLanguages
      properties:
        tenantId:
          type: string
        data:
          additionalProperties:
            type: string
          type: object
        preferredLanguages:
          items:
            type: string
          type: array
        roles:
          items:
            type: string
          type: array
        timezone:
          type: string
      type: object
    iambackofficeUserTwoFactorConfiguration:
      example:
        methods:
        - method: method
          mobilePhone: mobilePhone
          id: id
          secret: secret
          authenticator:
            codeLength: 0
            timeStep: 6
            algorithm: algorithm
          email: email
        - method: method
          mobilePhone: mobilePhone
          id: id
          secret: secret
          authenticator:
            codeLength: 0
            timeStep: 6
            algorithm: algorithm
          email: email
        recoveryCodes:
        - recoveryCodes
        - recoveryCodes
      properties:
        methods:
          items:
            $ref: '#/components/schemas/iambackofficeTwoFactorMethod'
          type: array
        recoveryCodes:
          items:
            type: string
          type: array
      type: object
    protobufAny:
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON

        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      example:
        '@type': '@type'
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
    rpcStatus:
      example:
        code: 0
        details:
        - '@type': '@type'
        - '@type': '@type'
        message: message
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        details:
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
      type: object
  securitySchemes:
    standardAuthorization:
      flows:
        implicit:
          scopes: {}
      type: oauth2
x-original-swagger-version: "2.0"

